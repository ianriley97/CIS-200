import java.util.*;
import java.text.*;
import java.io.*;

public class proj4 {
	public static void main(String [] args) throws IOException {
	Scanner s = new Scanner(new File("flower.txt"));
	//This works. This prints out the first line of the file. The size of the file.
	String line = s.nextLine();
	String row = line.substring(0, 2);
	int rowSize = Integer.parseInt(row);
	String col = line.substring(3, 5);
	int colSize = Integer.parseInt(col);
	System.out.println(rowSize + " " + colSize); //Test statement
	line = s.nextLine();
	//Just creating code blocks ignore this
	//You have the size of the matrix in rowSize and colSize. So now you have to take the rest of the file and add it to the matrix in the right spot. Don't forget about the parity bits
	int[][] picture = new int[rowSize][colSize];
	int i = 0;
	int j = 0;
	for (i = 0; i < rowSize; i++) {
		line = s.nextLine();
		//System.out.println("The first for loop is working"); Test statements
		for (j = 0; j < colSize; j++) {
			if (j < colSize) {
				//System.out.println("The second for loop is working" + " " + j); Test statement
				char valueChar = line.charAt(j);
				int value = (int)(valueChar - '0');
				//System.out.println(value); Test statement
				//Really bad way to do this but I don't feel like figuring out the problem with my input array
				picture[i][j] = value;
					System.out.print(picture[i][j]);
					//System.out.print(j);TS
					continue;
			}
		}
	}
	//The part above works like a charm.
	//Fucking golden
	//Now this is the part with checking the parity bits
	//Don't even bother doing the fixing here. Maybe I will add it later
	//We'll try using a for loop first to count the ones and zeroes of the row and
	//then decide if the parity bit should be a one or zero.
	//The do the exact same thing for columns
	//int count = 0;
	//int parity = 0;
	//picture[row][col]
	//System.out.print(picture[25][43]);
	/**
	for (int n = 0; n < rowSize; n++) {
		//System.out.println("The first for loop is working " + n);
		for (int m = 0; m < colSize; m++) {
			//System.out.println("The second for loop is working " + m);
			if (picture[n][m] == 1) {
				count++;
				//System.out.println("The first if is working");
			}
		}
		parity = count % 2;
		if (parity != picture[n][43]) {
			//System.out.println("The second if statement is working");
			count = 0;
			for (int k = 0; k < colSize; k++) {
				//System.out.println("The third for loop is working " + k);
				for (int g = 0; g < rowSize; g++) {
					//System.out.println("The fourth for loop is working" + g);
					if (picture[g][k] == 1) {
						count++;
						//System.out.println("The third if statement is working");
					}
				}
				parity = count % 2;
				if (parity != picture[25][k]) {
					//System.out.println("The fourth if statement is working " + parity + " " + picture[25][k] + " " +  k + n);
					picture[n][k] = 1;
					//System.out.println("Position (" + n + ", " + k + " was modified...correcting");
				}
			}
		}
	}
	**/
	for (int n = 0; n < rowSize; n++) {
		for (int m = 0; m < colSize; m++) {
			if (picture[n][(rowSize) - 1] == picture[m][(colSize) - 1]) {
				System.out.print("Position " + n + ", " + m + "out of place correcting" );
				picture[n][m] = 1;
				continue;
			}
		}
	}
	for (int b = 0; b < rowSize; b++) {
		for (int a =0; a < colSize; a++) {
			System.out.print(picture[b][a]);
		}
	}
	}
}




	

	
